import json

from project.settings import TG_TOKEN
from tg_bot import core, models
from tg_bot.core import Bot
from tg_bot.utils import keyboards

if not TG_TOKEN:
    raise ValueError('TG_TOKEN –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')

bot = Bot(TG_TOKEN)


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_message(message):
    chat_id = message.chat.id
    user = core.User(chat_id)

    if not user.object:
        bot.send_message(chat_id=chat_id, text=bot.get_start_message())
        msg = bot.send_authorization_message(chat_id=chat_id)
        bot.register_next_step_handler(msg, authorization)
        return

    bot.send_message(chat_id=chat_id, text=bot.get_start_message(), reply_markup=keyboards.get_main_menu_keyboard())


def authorization(message):
    chat_id = message.chat.id
    token = message.text
    username = message.from_user.username
    user = core.User(chat_id)
    if user.authorization(token=token, username=username):
        bot.send_message(chat_id=chat_id, text=bot.get_instruction(), reply_markup=keyboards.get_main_menu_keyboard())
    else:
        msg = bot.send_authorization_message(chat_id)
        bot.register_next_step_handler(msg, authorization)


@bot.message_handler(regexp='^–ü—Ä–æ—Ñ–∏–ª—å$')
def profile(message):
    chat_id = message.chat.id
    user = core.User(chat_id)
    if not user.object:
        msg = bot.send_authorization_message(chat_id)
        bot.register_next_step_handler(msg, authorization)
        return

    bot.send_message(chat_id=chat_id, text=user.get_user_info_text(),
                     reply_markup=keyboards.get_inline_profile_keyboard(), parse_mode='html')


@bot.message_handler(regexp='^–ü–æ–∏—Å–∫$')
def search_menu(message):
    chat_id = message.chat.id
    user = core.User(chat_id)
    if not user.object:
        msg = bot.send_authorization_message(chat_id)
        bot.register_next_step_handler(msg, authorization)
        return

    bot.send_message(chat_id=chat_id, text='–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞',
                     reply_markup=keyboards.get_search_menu_keyboard(), parse_mode='html')


@bot.message_handler(regexp='^–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é$')
def main_menu(message):
    chat_id = message.chat.id
    user = core.User(chat_id)
    if not user.object:
        msg = bot.send_authorization_message(chat_id)
        bot.register_next_step_handler(msg, authorization)
        return

    bot.send_message(chat_id=chat_id, text='–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é',
                     reply_markup=keyboards.get_main_menu_keyboard(), parse_mode='html')


@bot.message_handler(regexp='^–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã$')
def main_menu(message):
    chat_id = message.chat.id
    user = core.User(chat_id)
    if not user.object:
        msg = bot.send_authorization_message(chat_id)
        bot.register_next_step_handler(msg, authorization)
        return

    projects = core.Project.get_projects_by_user(user_profile=user.object.student_profile)
    if not projects:
        bot.send_message(chat_id=chat_id, text='–£ –í–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ü•∫\n\n'
                                               '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Å–µ–±—è‚ò∫Ô∏è\n')
        return

    for project in projects:
        bot.send_message(chat_id=chat_id, text=core.Project.get_project_info_str(project),
                         reply_markup=keyboards.get_main_menu_keyboard(), parse_mode='html')


@bot.message_handler(
    content_types=['audio', 'photo', 'voice', 'video', 'document', 'text', 'location', 'contact', 'sticker'])
def invalid_message(message):
    """
    –û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç.
    –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ –ø–æ—Ä—è–¥–∫—É!
    :return:
    """
    chat_id = message.chat.id
    user = core.User(chat_id)
    if not user.object:
        msg = bot.send_authorization_message(chat_id)
        bot.register_next_step_handler(msg, authorization)
        return

    bot.send_invalid_message_answer(chat_id=chat_id)
